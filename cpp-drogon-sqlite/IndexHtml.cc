//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "IndexHtml.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
#include "Film.h"
using namespace drogon;
std::string IndexHtml::genText(const DrTemplateData& IndexHtml_view_data)
{
	drogon::OStringStream IndexHtml_tmp_stream;
	std::string layoutName{""};
  auto films=IndexHtml_view_data.get<std::vector<Film>>("films");
	IndexHtml_tmp_stream << "<!doctype html>\n";
	IndexHtml_tmp_stream << "<html lang=\"en\">\n";
	IndexHtml_tmp_stream << "  <head>\n";
	IndexHtml_tmp_stream << "    <meta charset=\"utf-8\">\n";
	IndexHtml_tmp_stream << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n";
	IndexHtml_tmp_stream << "    <title>Basic web benchmark template</title>\n";
	IndexHtml_tmp_stream << "    <link rel=\"stylesheet\" href=\"https://unpkg.com/@picocss/pico@1.*/css/pico.min.css\">\n";
	IndexHtml_tmp_stream << "  </head>\n";
	IndexHtml_tmp_stream << "  <body>\n";
	IndexHtml_tmp_stream << "      <section id=\"tables\">\n";
	IndexHtml_tmp_stream << "        <h2>Hi, ";
{
    auto & val=IndexHtml_view_data["name"];
    if(val.type()==typeid(const char *)){
        IndexHtml_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        IndexHtml_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	IndexHtml_tmp_stream << "!</h2>\n";
	IndexHtml_tmp_stream << "        <figure>\n";
	IndexHtml_tmp_stream << "          <table role=\"grid\">\n";
	IndexHtml_tmp_stream << "            <thead>\n";
	IndexHtml_tmp_stream << "              <tr>\n";
	IndexHtml_tmp_stream << "                <th scope=\"col\">#</th>\n";
	IndexHtml_tmp_stream << "                <th scope=\"col\">Title</th>\n";
	IndexHtml_tmp_stream << "                <th scope=\"col\">Release Year</th>\n";
	IndexHtml_tmp_stream << "              </tr>\n";
	IndexHtml_tmp_stream << "            </thead>\n";
	IndexHtml_tmp_stream << "            <tbody>\n";
	IndexHtml_tmp_stream << "            ";
for (const auto &film : films) {
	IndexHtml_tmp_stream << "              <tr>\n";
	IndexHtml_tmp_stream << "                <th scope=\"row\">";
IndexHtml_tmp_stream<<film.index;
	IndexHtml_tmp_stream << "</th>\n";
	IndexHtml_tmp_stream << "                <td>";
IndexHtml_tmp_stream<<film.title;
	IndexHtml_tmp_stream << "</td>\n";
	IndexHtml_tmp_stream << "                <td>";
IndexHtml_tmp_stream<<film.releaseYear;
	IndexHtml_tmp_stream << "</td>\n";
	IndexHtml_tmp_stream << "              </tr>\n";
	IndexHtml_tmp_stream << "            ";
}
	IndexHtml_tmp_stream << "            </tbody>\n";
	IndexHtml_tmp_stream << "          </table>\n";
	IndexHtml_tmp_stream << "        </figure>\n";
	IndexHtml_tmp_stream << "      </section>\n";
	IndexHtml_tmp_stream << "  </body>\n";
	IndexHtml_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(IndexHtml_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = IndexHtml_view_data;
auto str = std::move(IndexHtml_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
